package com.merryapps.tictacpro.model.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.merryapps.framework.EntityState;
import com.merryapps.framework.EntityStateConverter;

import com.merryapps.tictacpro.model.db.DifficultyEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DIFFICULTY".
*/
public class DifficultyEntityDao extends AbstractDao<DifficultyEntity, Long> {

    public static final String TABLENAME = "DIFFICULTY";

    /**
     * Properties of entity DifficultyEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property SecondsAddedOnCorrectMove = new Property(4, int.class, "secondsAddedOnCorrectMove", false, "SECONDS_ADDED_ON_CORRECT_MOVE");
        public final static Property SecondsSubtractedOnCorrectMove = new Property(5, int.class, "secondsSubtractedOnCorrectMove", false, "SECONDS_SUBTRACTED_ON_CORRECT_MOVE");
        public final static Property MinimumScoreToUnlockNextDifficulty = new Property(6, int.class, "minimumScoreToUnlockNextDifficulty", false, "MINIMUM_SCORE_TO_UNLOCK_NEXT_DIFFICULTY");
        public final static Property IsLocked = new Property(7, boolean.class, "isLocked", false, "IS_LOCKED");
        public final static Property EntityState = new Property(8, String.class, "entityState", false, "ENTITY_STATE");
    };

    private final EntityStateConverter entityStateConverter = new EntityStateConverter();

    public DifficultyEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DifficultyEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DIFFICULTY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE\" INTEGER NOT NULL UNIQUE ," + // 1: type
                "\"NAME\" TEXT NOT NULL ," + // 2: name
                "\"DESCRIPTION\" TEXT NOT NULL ," + // 3: description
                "\"SECONDS_ADDED_ON_CORRECT_MOVE\" INTEGER NOT NULL ," + // 4: secondsAddedOnCorrectMove
                "\"SECONDS_SUBTRACTED_ON_CORRECT_MOVE\" INTEGER NOT NULL ," + // 5: secondsSubtractedOnCorrectMove
                "\"MINIMUM_SCORE_TO_UNLOCK_NEXT_DIFFICULTY\" INTEGER NOT NULL ," + // 6: minimumScoreToUnlockNextDifficulty
                "\"IS_LOCKED\" INTEGER NOT NULL ," + // 7: isLocked
                "\"ENTITY_STATE\" TEXT NOT NULL );"); // 8: entityState
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DIFFICULTY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DifficultyEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getDescription());
        stmt.bindLong(5, entity.getSecondsAddedOnCorrectMove());
        stmt.bindLong(6, entity.getSecondsSubtractedOnCorrectMove());
        stmt.bindLong(7, entity.getMinimumScoreToUnlockNextDifficulty());
        stmt.bindLong(8, entity.getIsLocked() ? 1L: 0L);
        stmt.bindString(9, entityStateConverter.convertToDatabaseValue(entity.getEntityState()));
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DifficultyEntity readEntity(Cursor cursor, int offset) {
        DifficultyEntity entity = new DifficultyEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // type
            cursor.getString(offset + 2), // name
            cursor.getString(offset + 3), // description
            cursor.getInt(offset + 4), // secondsAddedOnCorrectMove
            cursor.getInt(offset + 5), // secondsSubtractedOnCorrectMove
            cursor.getInt(offset + 6), // minimumScoreToUnlockNextDifficulty
            cursor.getShort(offset + 7) != 0, // isLocked
            entityStateConverter.convertToEntityProperty(cursor.getString(offset + 8)) // entityState
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DifficultyEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setDescription(cursor.getString(offset + 3));
        entity.setSecondsAddedOnCorrectMove(cursor.getInt(offset + 4));
        entity.setSecondsSubtractedOnCorrectMove(cursor.getInt(offset + 5));
        entity.setMinimumScoreToUnlockNextDifficulty(cursor.getInt(offset + 6));
        entity.setIsLocked(cursor.getShort(offset + 7) != 0);
        entity.setEntityState(entityStateConverter.convertToEntityProperty(cursor.getString(offset + 8)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DifficultyEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DifficultyEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
