package com.merryapps.tictacpro.model.db;

import com.merryapps.tictacpro.model.db.DaoSession;
import de.greenrobot.dao.DaoException;

import com.merryapps.framework.EntityState;
import com.merryapps.tictacpro.model.game.GameState;
import com.merryapps.tictacpro.model.game.SoundPref;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "USER_STATS".
 */
public class GlobalStatsEntity implements com.merryapps.framework.Entity {

    private Long id;
    private Long difficultyId;
    /** Not-null value. */
    private SoundPref soundPref;
    /** Not-null value. */
    private GameState gameState;
    /** Not-null value. */
    private EntityState entityState;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient GlobalStatsEntityDao myDao;

    private DifficultyEntity difficultyEntity;
    private Long difficultyEntity__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public GlobalStatsEntity() {
    }

    public GlobalStatsEntity(Long id) {
        this.id = id;
    }

    public GlobalStatsEntity(Long id, Long difficultyId, SoundPref soundPref, GameState gameState, EntityState entityState) {
        this.id = id;
        this.difficultyId = difficultyId;
        this.soundPref = soundPref;
        this.gameState = gameState;
        this.entityState = entityState;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getGlobalStatsEntityDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getDifficultyId() {
        return difficultyId;
    }

    public void setDifficultyId(Long difficultyId) {
        this.difficultyId = difficultyId;
    }

    /** Not-null value. */
    public SoundPref getSoundPref() {
        return soundPref;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setSoundPref(SoundPref soundPref) {
        this.soundPref = soundPref;
    }

    /** Not-null value. */
    public GameState getGameState() {
        return gameState;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setGameState(GameState gameState) {
        this.gameState = gameState;
    }

    /** Not-null value. */
    public EntityState getEntityState() {
        return entityState;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEntityState(EntityState entityState) {
        this.entityState = entityState;
    }

    /** To-one relationship, resolved on first access. */
    public DifficultyEntity getDifficultyEntity() {
        Long __key = this.difficultyId;
        if (difficultyEntity__resolvedKey == null || !difficultyEntity__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DifficultyEntityDao targetDao = daoSession.getDifficultyEntityDao();
            DifficultyEntity difficultyEntityNew = targetDao.load(__key);
            synchronized (this) {
                difficultyEntity = difficultyEntityNew;
            	difficultyEntity__resolvedKey = __key;
            }
        }
        return difficultyEntity;
    }

    public void setDifficultyEntity(DifficultyEntity difficultyEntity) {
        synchronized (this) {
            this.difficultyEntity = difficultyEntity;
            difficultyId = difficultyEntity == null ? null : difficultyEntity.getId();
            difficultyEntity__resolvedKey = difficultyId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        GlobalStatsEntity that = (GlobalStatsEntity) o;

        return id != null ? id.equals(that.id) : that.id == null;

    }

    @Override
    public int hashCode() {
        return id != null ? id.hashCode() : 0;
    }

    @Override
    public String toString() {
        return "GlobalStatsEntity{" +
                "id=" + id +
                ", difficultyId=" + difficultyId +
                ", soundPref=" + soundPref +
                ", gameState=" + gameState +
                ", entityState=" + entityState +
                ", daoSession=" + daoSession +
                ", myDao=" + myDao +
                ", difficultyEntity=" + difficultyEntity +
                ", difficultyEntity__resolvedKey=" + difficultyEntity__resolvedKey +
                '}';
    }
    // KEEP METHODS END

}
